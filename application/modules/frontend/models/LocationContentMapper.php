<?php
class Frontend_Model_LocationContentMapper extends Frontend_Model_MapperAbstract
{
    const DELETE_THEN_INSERT = 1;
    const UPDATE = 2;

    private function _removeEntries($idLocation, $loctionKeyMap, $callback = null)
    {
        $locationContentResource = $this->getResource('LocationContent');

        foreach ($loctionKeyMap as $lang => $langObjs) {
            foreach ($langObjs as $fieldTag => $fieldObjs) {
                foreach ($fieldObjs as $priority => $something) {
                    $locationContentRow = $locationContentResource->getLocationContentByCompositeKey(
                        $idLocation,
                        $lang,
                        $fieldTag,
                        $priority
                    );

                    $locationContentRow->delete();
                    //var_dump($idLocation, $lang . ", " . $fieldTag . ", " . $priority);
                }
            }
        }
    }

    public function saveContentLocation(Frontend_Model_LocationContent $obj, $mode = self::DELETE_THEN_INSERT)
    {
        $locationResource = $this->getResource('Location');
        $locationContentResource = $this->getResource('LocationContent');
        $locationService = $this->getService('LocationContent');

        $locationRow = $locationResource->lookup($obj->getUri());

        if (null === $locationRow)
            throw new Exception("URI $uri does not match a location in the database");

        $idLocation = $locationRow->idLocation;
        $composeKeyMap = $locationService->getComposeKeysArrayByLocationId($idLocation);
        //var_dump($composeKeyMap[$idLocation]);

        if ($mode === self::DELETE_THEN_INSERT) {
            $locationContentResource->deleteLocationContentByLocationId($idLocation);
        }

        // images
        foreach ($obj->getImages() as $imgObj) {
            // if the composite key already exists, we need to update and not insert
            // but we pass a SHA1 checksum of the content and only need update if the
            // data has changed.  SHA1's are automatically generated by triggers in the MySQL
            // database when an insert or update is made
            $uri = $imgObj->getUri();
            $imgPriority = $imgObj->getPriority();

            if (($mode === self::UPDATE) && isset($composeKeyMap[$idLocation]['EN'][Common_Resource_LocationContentField::IMAGE_URI][$imgPriority])) {
                $locationContentResource->updateLocationContent(
                    $idLocation,
                    Common_Resource_LocationContentField::IMAGE_URI,
                    $uri,
                    sha1($uri),
                    $imgPriority,
                    'EN'
                );
                unset($composeKeyMap[$idLocation]['EN'][Common_Resource_LocationContentField::IMAGE_URI][$imgPriority]);
            } else {
                $locationContentResource->addLocationContent(
                    $idLocation,
                    Common_Resource_LocationContentField::IMAGE_URI,
                    $uri,
                    $imgPriority,
                    'EN'
                );
            }


            foreach ($imgObj->getCaptions() as $lang => $caption) {
                if (($mode === self::UPDATE) && isset($composeKeyMap[$idLocation][strtoupper($lang)][Common_Resource_LocationContentField::IMAGE_CAPTION][$imgPriority])) {
                    $locationContentResource->updateLocationContent(
                        $idLocation,
                        Common_Resource_LocationContentField::IMAGE_CAPTION,
                        $caption,
                        sha1($caption),
                        $imgPriority,
                        $lang
                    );
                    unset($composeKeyMap[$idLocation][strtoupper($lang)][Common_Resource_LocationContentField::IMAGE_CAPTION][$imgPriority]);
                } else {
                    $locationContentResource->addLocationContent(
                        $idLocation,
                        Common_Resource_LocationContentField::IMAGE_CAPTION,
                        $caption,
                        $imgPriority,
                        $lang
                    );
                }
            }
        }

        // headings
        foreach ($obj->getHeadings() as $lang => $heading) {
            if (($mode === self::UPDATE) && isset($composeKeyMap[$idLocation][strtoupper($lang)][Common_Resource_LocationContentField::HEADING][1])) {
                $locationContentResource->updateLocationContent(
                    $idLocation,
                    Common_Resource_LocationContentField::HEADING,
                    $heading,
                    sha1($heading),
                    1,
                    $lang
                );

                unset($composeKeyMap[$idLocation][strtoupper($lang)][Common_Resource_LocationContentField::HEADING][1]);
            } else {
                $locationContentResource->addLocationContent(
                    $idLocation,
                    Common_Resource_LocationContentField::HEADING,
                    $heading,
                    1,
                    $lang
                );
            }

        }

        // bodys
        foreach ($obj->getAllBodys() as $bodyObj) {
            $bodyPriority = $bodyObj->getPriority();
            $bodyLang = strtoupper($bodyObj->getLanguage());

            if (($mode === self::UPDATE) && isset($composeKeyMap[$idLocation][$bodyLang][Common_Resource_LocationContentField::BODY][$bodyPriority])) {
                $locationContentResource->updateLocationContent(
                    $idLocation,
                    Common_Resource_LocationContentField::BODY,
                    $bodyObj->getContent(),
                    sha1($heading),
                    $bodyPriority,
                    $bodyLang
                );

                unset($composeKeyMap[$idLocation][$bodyLang][Common_Resource_LocationContentField::BODY][$bodyPriority]);
            } else {
                $locationContentResource->addLocationContent(
                   $idLocation,
                   Common_Resource_LocationContentField::BODY,
                   $bodyObj->getContent(),
                   $bodyPriority,
                   $bodyLang
                );
            }
        }

        if ($mode == self::UPDATE) {
            $this->_removeEntries($idLocation, $composeKeyMap[$idLocation]);
        }
    }

    public function getLocationContentByLocationId($idLocation, $lang = null)
    {
        $idLocation = (int) $idLocation;

        $locationContentResource = $this->getResource('LocationContent');
        $locationContentRowset = $locationContentResource->getLocationContentByLocationId(
            $idLocation,
            $lang
        );

        if (sizeof($locationContentRowset) === 0)
            return null;

        return $this->_createFromRowset($locationContentRowset);
    }

    /**
     *
     * @param string $uri the uri of this location e.g. france/aquitaine
     *
     * @return Frontend_Model_LocationContent
     */
    public function getLocationContentByUri($uri, $lang = null)
    {
        $locationResource = $this->getResource('Location');
        $locationContentResource = $this->getResource('LocationContent');

        $locationRow = $locationResource->lookup($uri);

        if (null === $locationRow)
            return null;

        $locationContentRowset = $locationContentResource->getLocationContentByLocationId(
            $locationRow->idLocation,
            $lang
        );

        $locationContentObj = $this->_createFromRowset($locationContentRowset);

        $locationContentObj-setUri($uri);

        return $locationContentObj;
    }

    public function getAllLocationsSummary()
    {
        $locationContentResource = $this->getResource('LocationContent');
        $locationContentRowset = $locationContentResource->getAllLocationSummarys();
        
        return $locationContentRowset;
    }

    private function _createFromRowset($locationContentRowset)
    {
        $locationContentObj = new Frontend_Model_LocationContent();

        $imgObjects  = array();
        $bodyObjects = array();
        foreach ($locationContentRowset as $locationContentRow) {
            $priority = $locationContentRow->priority;

            switch ($locationContentRow->fieldTag) {
                case Common_Resource_LocationContentField::IMAGE_URI:
                case Common_Resource_LocationContentField::IMAGE_CAPTION:
                    if (!isset($imgObjects[$priority])) {
                        $imgObjects[$priority] = new Frontend_Model_LocationContentImage();
                        $imgObjects[$priority]->setPriority($priority);

                        // attach this new image object to the main object
                        $locationContentObj->addImage($imgObjects[$priority]);
                    }

                    if (Common_Resource_LocationContentField::IMAGE_URI === $locationContentRow->fieldTag) {
                        $imgObjects[$priority]->setUri($locationContentRow->content);
                    } else if (Common_Resource_LocationContentField::IMAGE_CAPTION === $locationContentRow->fieldTag) {
                        $imgObjects[$priority]->setCaption($locationContentRow->content, $locationContentRow->lang);
                    }
                    break;

                case Common_Resource_LocationContentField::HEADING:
                    $locationContentObj->setHeading(
                        $locationContentRow->content,
                        $locationContentRow->lang
                    );
                    break;

                case Common_Resource_LocationContentField::BODY:
                    if (!isset($bodyObjects[$priority])) {
                        $bodyObjects[$priority] = new Frontend_Model_LocationContentBody();
                        $bodyObjects[$priority]->setPriority($priority);

                        $locationContentObj->addBody($bodyObjects[$priority]);
                    }

                    $bodyObjects[$priority]->setContent($locationContentRow->content)
                                           ->setLanguage($locationContentRow->lang);
                    break;
            }
        }

        return $locationContentObj;
    }
}
